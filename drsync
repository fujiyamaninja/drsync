#!/usr/bin/env bash

# create a variable that contains the entire set of arguments passed as a single line and preserving escape characters
args=""
nonint='no'
for arg in "$@"
do
  if [[ "$arg" == '--non-int' ]]; then
    nonint='yes'
  else
    args+=$(printf '%q ' "$arg")
  fi
done

# create a hidden logfile directory if there isn't already one
if [ ! -d "$HOME/.drsync_transfers" ] 
then
   mkdir "$HOME/.drsync_transfers"
fi

# figure out a valid transfer number and assign a new session name
prev_transfer_num=$(ls "$HOME/.drsync_transfers" | sort --version-sort | grep "drsync.*.cmd" | tail -1 | grep -o "[1-9][0-9]*")
transfer_num=$((prev_transfer_num+1))
session_name=$(printf 'drsync.%06g' "$transfer_num")
logfile="$HOME/.drsync_transfers/$session_name"

# log the command that was used
printf 'drsync %s' "$args" > "$logfile.cmd"
# touch logfile to reserve number in case another job launches before logging starts
touch "$logfile.status"
touch "$logfile.err"

# parse args to figure out if the transfer is using any --include-from or --files-from text files, so that we can preserve them alongside the logs
files_from_used='No'
include_from_used='No'
for var in "$@"
do
  if [[ $var == *"--files-from"* ]]; then
    files_from=$(echo "$var" | sed 's/--files-from=//')
    files_from_used='Yes'
  fi
  if [[ $var == *"--include-from"* ]]; then
    include_from=$(echo "$var" | sed 's/--include-from=//')
    include_from_used='Yes'
  fi
done

# parse args to figure out which args are source directories.
sources=()
sources_str=""
sources_print=""
for var in ${@:1:$#-1}
do
  [[ $var =~ ^-.* ]] && continue
    sources+=("$var")
    sources_str="$sources_str$var\n"
    sources_print="$sources_print$var "
done

# parse for target
target="${@: -1}"

# if we passed a --remove-source-files, change the cleanup message
cleanup='No'
if [[ $args == *"--remove-source-files"* ]]; then
  cleanup='Yes'
fi

printf "$sources_str" > "$logfile.sources"
printf "$target" > "$logfile.target"

export sources_print
export target
export cleanup
export include_from_used
export include_from
export files_from_used
export files_from
export logfile
export args

function rsyncwrapper {
  start=$(date)
  echo Started: "$start"
  echo pwd: '   ' "$PWD"
  echo Sources: "$sources_print"
  echo Target: '' "$target"
  echo Remove and clean sources: "$cleanup"
  echo Use --include-from option: "$include_from_used"
  echo Use --files-from option: "$files_from_used"
  bash -c "rsync --no-inc-recursive --info=progress2 $args 2>> $logfile.err"
  if [[ "$include_from_used" == 'Yes' ]]; then
    mv "$include_from" "$logfile.includefrom 2>> $logfile.err"
  fi
  if [[ "$files_from_used" == 'Yes' ]]; then
    mv "$files_from" "$logfile.filesfrom 2>> $logfile.err"
  fi
  finish=$(date)
  echo Finished: "$finish"
  sleep 3 
}
export -f rsyncwrapper

# Do a dry run and ask for confirmation, unless we ran non-interactive.
bash -c "rsync -v --dry-run $args > $logfile.filelist"
if [[ "$nonint" != 'yes' ]]; then
  bash -c "awk -v n=1 -v s='<===================== VERIFY INCREMENTAL FILE LIST =====================>' 'NR == n {print s} {print}' $logfile.filelist | less -S"
  read -p "Proceed with transfer? ([y]/n):" transfer_input
  transfer_approved="${transfer_input:0:1}"
else
  transfer_approved='y'
fi

echo ''
if [ "$transfer_approved" == 'n' ] || [ "$transfer_approved" == 'N' ]; then
  echo 'Transfer aborted.'
  screen -dmS "$session_name" -L -Logfile "$logfile.log" bash -c "touch $logfile.err; echo Transfer aborted.; sleep 3"
else
  # launch the screen session with the arguments we passed using the wrapper we defined above
  screen -dmS "$session_name" -L -Logfile "$logfile.log" bash -c 'rsyncwrapper'
fi

# create a background process that dumps the current screen content to a file for the session so long as the screen exists. Also put something in the status file to notify if any error messages were pushed to the error log.
(while screen -list | grep -q "$session_name"; do screen -S "$session_name" -X hardcopy "$logfile.status" >/dev/null 2>&1; [ -s "$logfile.err" ] && echo "Error encountered during rsync execution. See $logfile.err" >> "$logfile.status"; sleep 1; done) &

# tell the user where to watch the progress output
echo "Status can be viewed at $logfile.status"
