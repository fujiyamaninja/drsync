#!/usr/bin/env bash

if [ ! -d "$HOME/.drsync_transfers" ] 
then
   mkdir "$HOME/.drsync_transfers"
fi

# figure out a valid transfer number and assign a new session name
prev_transfer_num=`ls "$HOME/.drsync_transfers" | sort --version-sort | grep "drsync" | tail -1 | grep -o "[1-9][0-9]*"`
transfer_num=$((prev_transfer_num+1))
session_name=`printf 'drsync.%06g' "$transfer_num"`
logfile="$HOME/.drsync_transfers/$session_name"

# touch logfile to reserve number in case another job launches before logging starts
touch "$logfile"

# create a detached screen session running bash with the name from above
screen -dmS "$session_name" bash

# create a background process that dumps the current screen content to a file for the session so long as the screen exists
(while screen -list | grep -q "$session_name"; do screen -S "$session_name" -X hardcopy "$logfile" >/dev/null 2>&1; sleep 1; done) &


# create an arg passthrough for rsync and set up the command that we're going to run
arg_arr=()
for arg in "$@"; do
    #the shell eats the escape characters when things get passed in so we need to put them back
    arg_escaped=$(echo "$arg" | sed -e 's/\\/\\\\/g' -e 's/ /\\ /g' -e 's/!/\\!/g' -e 's/(/\\(/g' -e 's/)/\\)/g' -e 's/#/\\#/g')
    arg_arr+=($arg_escaped)
done
args=$(printf '%s ' "${arg_arr[@]}")
source=$(echo "${@:(-2):1}" | sed -e 's/\\/\\\\/g' -e 's/ /\\ /g' -e 's/!/\\!/g' -e 's/(/\\(/g' -e 's/)/\\)/g' -e 's/#/\\#/g')
source_dir=$(echo "${@:(-2):1}" | sed -e 's/\\/\\\\/g' -e 's/ /\\ /g' -e 's/!/\\!/g' -e 's/(/\\(/g' -e 's/)/\\)/g' -e 's/#/\\#/g' | grep -o '.*/')
target=$(echo "${@: -1}" | sed -e 's/\\/\\\\/g' -e 's/ /\\ /g' -e 's/!/\\!/g' -e 's/(/\\(/g' -e 's/)/\\)/g' -e 's/#/\\#/g')
working=$(echo "$PWD" | sed -e 's/\\/\\\\/g' -e 's/ /\\ /g' -e 's/!/\\!/g' -e 's/(/\\(/g' -e 's/)/\\)/g' -e 's/#/\\#/g')
commands=$(printf "trap 'sleep 5; exit' ERR; cd %s; rsync --info=progress2 --no-inc-recursive %s; sleep 5; exit;" "$working" "$args")

# if the user sends the --remove-source-files rsync option, then we'll send a command that cleans up the leftover empty directories.
if [[ $args == *"--remove-source-files"* ]]; then
  commands=$(printf "trap 'sleep 5; exit' ERR; cd %s; rsync --info=progress2 --no-inc-recursive %s; sleep 5; find %s -empty -type d -delete; sleep 5; exit;" "$working" "$args" "$source_dir")
fi

# push the rsync command to the screen session
screen -S "$session_name" -X stuff "$commands"`echo -ne '\015'`

# tell the user where to watch the progress output
printf 'Status can be viewed by watching %s\n' "$logfile"
